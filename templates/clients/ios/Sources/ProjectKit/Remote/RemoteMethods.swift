// Code generated by github.com/nathanborror/starter
// DO NOT EDIT! THIS MEANS YOU!

import Foundation

extension Remote {

    func ping(then: @escaping (RemoteResult<Bool>) -> Void) {
        then(RemoteResult.success(true))
    }
}

extension Remote { // Mutations
    {{range .Definition.Mutations}}
    func {{.Name}}({{if .Arguments}}{{.Arguments|joinArgsForSwift}}, {{end}}token: String?, then: @escaping (RemoteResult<{{.Name|titlecase}}Response>) -> Void) {
        mutate("{{.Name|lowercase}}", input: input, token: token, then: then)
    }
    {{end}}
}
{{ $queries := .Definition.Queries }}
extension Remote { // Queries
    {{range $query := $queries}}{{if $query.Return.IsInterface|eq true}}{{range $query.Return.PossibleTypes}}
    func {{$query.Name}}{{.Name|titlecase}}({{if $query.Arguments}}{{$query.Arguments|joinArgsForSwift}}, {{end}}token: String?, then: @escaping (RemoteResult<{{$query.Name|titlecase}}{{.Name|titlecase}}Response>) -> Void) {
        query("{{$query.Name|lowercase}}.{{.Name|lowercase}}", token: token, then: then)
    }
    {{end}}{{else}}
    func {{$query.Name}}({{if $query.Arguments}}{{$query.Arguments|joinArgsForSwift}}, {{end}}token: String?, then: @escaping (RemoteResult<{{$query.Name|titlecase}}Response>) -> Void) {
        query("{{$query.Name|lowercase}}", token: token, then: then)
    }
    {{end}}{{end}}
}
