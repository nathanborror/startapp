{{ $name := .IOSClient.Name }}
// Code generated by github.com/nathanborror/starter
// DO NOT EDIT! THIS MEANS YOU!

import Foundation
{{range .Definition.Scalars|excludeSwiftScalars}}
typealias {{.Name}} = {{.|graphQLScalarToSwiftScalar}}{{end}}

// Interfaces
{{range .Definition.Interfaces}}
protocol {{.Name}} { {{range .Fields}}
    var {{.Name}}: {{.Type.Name}}?{{end}} { get }
}{{end}}

extension Remote { // Unions & Enums
    {{range .Definition.Unions}}
    enum {{.Name}} {}
    {{end}}{{range .Definition.Enums}}
    enum {{.Name}}: String, Codable { {{range .EnumValues}}
        case {{.|lowercase}} = "{{.|uppercase}}"{{end}}
    }
    {{end}}
}

extension Remote { // Objects
    {{range .Definition.Objects}}
    struct {{.Name}}: {{if .Interfaces}}{{.Interfaces|joinInterfacesForSwift}}, {{end}}Codable { {{range .Fields}}
        let {{.Name}}: {{.Type.Name|swiftScalar}}?{{end}}
    }
    {{end}}
}

extension Remote { // Inputs
    {{range .Definition.Inputs}}
    struct {{.Name}}: {{if .Interfaces}}{{.Interfaces|joinInterfacesForSwift}}, {{end}}Codable { {{range .Fields}}
        let {{.Name}}: {{.Type.Name|swiftScalar}}?{{end}}
    }
    {{end}}
}
{{ $queries := .Definition.Queries }}
extension Remote { // Responses
    {{range .Definition.Mutations}}
    struct {{.Name|titlecase}}Response: RemoteResponse {
        struct Data: Codable {
            let {{.Name}}: {{.Return.Name}}?
        }
        let data: Data?
        let errors: [RemoteError]?
    }
    {{end}}{{range $query := $queries}}{{if $query.Return.IsInterface|eq true}}{{range $query.Return.PossibleTypes}}
    struct {{$query.Name|titlecase}}{{.Name|titlecase}}Response: RemoteResponse {
        struct Data: Codable {
            let {{$query.Name}}: {{.Name}}?
        }
        let data: Data?
        let errors: [RemoteError]?
    }
    {{end}}{{else}}
    struct {{$query.Name|titlecase}}Response: RemoteResponse {
        struct Data: Codable {
            let {{$query.Name}}: {{$query.Return.Name}}?
        }
        let data: Data?
        let errors: [RemoteError]?
    } 
    {{end}}{{end}}
}