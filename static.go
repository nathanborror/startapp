// This file is automatically generated using github.com/mjibson/esc.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/.DS_Store": {
		local:   "static/.DS_Store",
		size:    6148,
		modtime: 1507518939,
		compressed: `
H4sIAAAAAAAA/+zYMQoCMRCF4TcxRcAmpWUaD+ANwrKewAtYeAX7HF2WeWBg1U6My/tA/gU3KhYxIwCb
7rcTkAEkeHHES4mPldBdG19DRERExmaetP/1BxGR4Sz7Q2Er27zG5wMbuzWZLWxlm9d4X2Ajm9jMFray
zctNyzh8GN/ZOKEYpxArbP3OdyPy73aevPz+n9/P/yKyYRbnyzw9B4L1DQCu3fWnQ0DwPwsP3VodBEQG
8wgAAP//agCIbQQYAAA=
`,
	},

	"/static/.gitignore": {
		local:   "static/.gitignore",
		size:    21,
		modtime: 1507518850,
		compressed: `
H4sIAAAAAAAA/9JzCY4PLskvSuXS0qtIzk9JLSjKzwIEAAD//0oeZPsVAAAA
`,
	},

	"/static/Makefile": {
		local:   "static/Makefile",
		size:    14,
		modtime: 1507481343,
		compressed: `
H4sIAAAAAAAA/0rMybHi4qxIzk9JTU/NAwQAAP//yNknqw4AAAA=
`,
	},

	"/static/Sources/Main/AppDelegate.swift": {
		local:   "static/Sources/Main/AppDelegate.swift",
		size:    547,
		modtime: 1507488862,
		compressed: `
H4sIAAAAAAAA/2SPQWvCQBCF7/kVc4xg8wMC1qaWUtFaaFEPpZQ1GZPBzcyyuzFIyH8vibZq3dO+ee/t
fkOlEethOZ2RD06iaaKFKrFtu1nwsJwmxmhKlSfhV0UcpFo5B4kxT6gxVx5jWE7f0RnhDO0Qrhq/GWiC
AABgryzUxJnUXWvd38ZHa1txCupcDb8vVXz97hAyyp6JyRVzVXFaEOdr8sWb6VwHuh+eVAyfV+X5pTnD
A8SQ8OFrDCNg0gO4u4dHEQ1Nz9WdIzKM/pjDrVVlv/lHahE5KhVxtJGKMzf4VxtHG5XuctuZE9FiYQRR
XZDHm6AV8SvCeiLsrWiNtv9zofaU9+hnI7zNxvAiJV5EBrcopdrhDA8JZytytNEYnjMWfWUZvK2OZG3Q
Bj8BAAD///2HlaEjAgAA
`,
	},

	"/static/Sources/Main/Assets.xcassets/AppIcon.appiconset/Contents.json": {
		local:   "static/Sources/Main/Assets.xcassets/AppIcon.appiconset/Contents.json",
		size:    2017,
		modtime: 1507519277,
		compressed: `
H4sIAAAAAAAA/7yVwU6EMBCG7zxFM2c0pYtdt69iPDRLXRqlNRTNRMK7m4JBjaERM5ZDU/KT+fKVmXQs
GGMMbKcvJoBid/N7fMZ1t3zRWN+BYmCfW+8MlN/jYN9MTAVHwX+EZ/20pAhrMpX/ijqQok4oTpmskihS
q5pjnelfpVGkVpKjzGSVRu220s3fWr3KBdp9eAlQss0pjWhHdxuUbnFCI+Kx3QYdJR5lDqM0iNDo9nB9
g3Ehg/lw1en+0QzWXbaoFRc1xuV3Zznv7suPi9k9eFBf+PBq+mC9A8Wqz3KgX4bW97EWnn1jlnJTMRXv
AQAA//9M7Bn04QcAAA==
`,
	},

	"/static/Sources/Main/Assets.xcassets/Contents.json": {
		local:   "static/Sources/Main/Assets.xcassets/Contents.json",
		size:    72,
		modtime: 1507519254,
		compressed: `
H4sIAAAAAAAA/6rmUlBQUFDKzEvLV7JSgPDAImWpRcWZ+XlKVgqGOgjRxNKSjPwiJSsFpYrk/JRUJbBM
LVctFyAAAP//zgIcrUgAAAA=
`,
	},

	"/static/Sources/Main/Base.lproj/LaunchScreen.storyboard": {
		local:   "static/Sources/Main/Base.lproj/LaunchScreen.storyboard",
		size:    1680,
		modtime: 1507519247,
		compressed: `
H4sIAAAAAAAA/3xU33PiNhB+v79iq3cbDA2kMzg3QMmVNsx1Ak0vfVvkBesia11Jzh3319/IhmDn1wvW
rJbvW+1+304+fi80PJJ1ik0qkrgvgIzkTJl9Kv7ZXEeXApxHk6FmQ6kwLD5efZhkLKuCjAd/KCkVkosY
y1JTvDSe7A4lzSqlM7LDeM6SccOVzOO1Z3vYMtos/rKciTPvMPB6Zu3unkoZJoNBnIwEuIPzVJwvxtPB
eCzAo92Tv62MVwWlQn1et6gElJZLsv4wlZKcm7PxlnWo35CAytG08qzxwJVPxf1iLUBjZWS+lpbIHEOV
o41F5eesNUmv2LjzzRp3NLWEp5BkzXaFXuaUHUPKKK9Q3yn6dixAk01FP/kz0mXEdytx9QEAYJJRSSYj
IxW5JlSHS13tlwZURsarnQr/fbvT8XJ2fv/futor0+pwMkz6v8bJQPRa+BJL3Cqt/AEMhiaGNwFaQmha
A/tKZeQEFMpsOuP5Le6/D3VSiAOHj5SBMuBzgi+SM4JL2LEt0L8CfHkGnvRe9mXiJJlOk36JotBgOHc4
ilrXdT7Uv8vfU7H4Yxct/42mg4U4J9WJvP1K0rtutL557MwPVNYZYYO9omJLNjB0s8VLvCdMeKBDkx/U
YzwZv+KMUuEkatrwtdJa1HT/0UU02kYDP3wDr8a0JH2DubNYkIDvqegHZx2O328q83kqhuMLATmpfe5T
MRqN24N8AYqVZ0tO/VBmv0L30BA8jx6x1+oHbjUd5d9QdGLvMdUGauC3KB/2liuTzUNQgA2eSgTsG3cm
Ara6ovqAusyxPtUA6xJl2EiV81wIaL7z1o27/TR7t44wkJta/p+C+puK3NHtzTxGm4fo8yKaze7fQpr0
AswrYup19fFKRqlRUs7B09A6L1tbYDm7Vtb5W3Ilm4xsU5W6/xr99X+0wKReUPYGt6RTUadCK/eZYHdd
qGcPmvReNcakZGWOapNoHtHdsMSwImvZXQxr1QWltbdEr6Y+uftk5UnvtCyufgYAAP//1Va/hJAGAAA=
`,
	},

	"/static/Sources/Main/HomeController.swift": {
		local:   "static/Sources/Main/HomeController.swift",
		size:    146,
		modtime: 1507488848,
		compressed: `
H4sIAAAAAAAA/1SKsQrCMBRF9/cVd9SlH+Cqg0Vxq3tonvAg6SsvaTuE/Ls0CNK73XOOxFktY+gfkul3
SuleLnKtO6MxuJRw18hXnbJpCGwXDP1bePsTFCIA0JXNxDM+yzRiFd5u4p/q/OmM0op9aZnZuoNtrlKl
bwAAAP//nsxmiJIAAAA=
`,
	},

	"/static/Sources/Main/Info.plist": {
		local:   "static/Sources/Main/Info.plist",
		size:    1048,
		modtime: 1507519123,
		compressed: `
H4sIAAAAAAAA/4yTUW+bPBSGr8uv8Ie+i+2iOLnZpolSEXArS5RYAartKnLgJLFKbGYOSfPvpyRMy5Iw
7Q7Jz/uc91jYf3zf1GQLtlVGP7hjb+QS0KWplF49uEX+dP/FfQwc/794GuXfBSNNrVokopgkPCLuPaVh
09RAaZzHRCQ8y8nYG1HKUpe4a8TmK6W73c6TB8orzeYAtlRY04DFfaJavB97I6/Cyg0c/2T/o07g+JUq
MXDu/DfYB9HTpNNVDTFsoTbNBjTOYKWM9unh2LnzW7RKr4L/P8TslSVT8cLSfJ6E6XMRPrOPPu3PL3zs
HcoO5aKGaxH7xqIiDycJm6fhy7CDV6BRLRXYa4eYTeMiyueTIo0TNucxS3P+xNls2KaXJlYlKqOl3b+e
7uRS/MkbDeVTubmxy68ef11EyPJNriDfN1eGUIhkKJatjcW+aHYkLtPj4boDC45/84QQcowk2Qx+dMpC
y8XaaJhmfepIoO2AntEFT2Sny3WGxu4XRtrq7GaOVD+gx0oLoG9MLXg/tYphq0qIZCMXqlaooD23SWtl
/31ul3az/XyhpWdsPyPrmsZYhIprBLuUJUytAo3y8B/8y5yC30oKY9FKhQMFfHp6Yz49vsDA+RkAAP//
eH958BgEAAA=
`,
	},

	"/static/Sources/MainKit/Error.swift": {
		local:   "static/Sources/MainKit/Error.swift",
		size:    459,
		modtime: 1507488308,
		compressed: `
H4sIAAAAAAAA/4TQPU4EMQwF4D6ncAkNB6ADie2YApgDeDNm1lJiB8dZBKO5OyJCLNL+UEXR+5K8mHNR
c9hokwmdVUIobZs4AknLsCw3A2Za1wcztVvoCywhAABErATYfEfiHPvpJ3prVP0ep6tnN5b5+pJko3/d
KN97Nf78Yw/Yfh98+Sh0fJldKPSTDeqjTGTVVc+rR/KdToP6XUr6fqq3qPcxHidR5ZXnZv1DG+TU7ETV
Yjob5kx2llSyPUcaBffICbfpYNbwFQAA//+4MrkYywEAAA==
`,
	},

	"/static/Sources/MainKit/Info.plist": {
		local:   "static/Sources/MainKit/Info.plist",
		size:    777,
		modtime: 1507524055,
		compressed: `
H4sIAAAAAAAA/3ySQW+bMBiGz+VXeKiH7hCcXKZpcqkIdio2Yiww2XZCDNzUqmNbxm2afz+lSTUtjJ2/
7330vPaH7l53CrwIN0ijb8NFNA+B0J3ppd7ehjVfzT6Hd3GAPuAi5T8ZAVbJwQNWL/MsBeEMwsRaJSDE
HAOWZxUHi2gOIaEhCB+9t18g3O/3UXvcijqzOy4OkDljhfOHXA5+tojmUe/7MA7Qif6XThygXnY+Dq7Q
kzjE6Wr5rHslsHgRytid0L4UW2k0gsdxcIUG76Textc3mGxIXrA1obzJE3pfJ/fkI4Ln+QWPvIru2be/
lBiDyA+S1jxZ5qShyXqakfVCe/kghRszWFngOuXNsqY4J02GCeXZKiPlNE0/GCw7L41u3WFzepNL8Kdo
PpWn7e4fXd49/luEtd1TuxX8YEeE1fr7t6lY9WicP4tWbxuX6cW07kTB65u0LsvjF7Ky+EpS3mxIWWUF
HcnTijmpO2lblap2GM4kAAB4h/2JIHg6KgTfTi4OfgcAAP//64QhfwkDAAA=
`,
	},

	"/static/Sources/MainKit/Main.swift": {
		local:   "static/Sources/MainKit/Main.swift",
		size:    46,
		modtime: 1507523517,
		compressed: `
H4sIAAAAAAAA/8rMLcgvKlFwyy/NS0ksyczP4+IqKE3KyUxWSM5JLC5WqK7W80vMTa2tVajmquUCBAAA
//9qjTu6LgAAAA==
`,
	},

	"/static/Sources/MainKit/Methods.swift": {
		local:   "static/Sources/MainKit/Methods.swift",
		size:    42,
		modtime: 1507488830,
		compressed: `
H4sIAAAAAAAA/8rMLcgvKlFwyy/NS0ksyczP4+JKrShJzSvOzM9TqK7W80vMTa2tVajmqgUEAAD//wcd
BAwqAAAA
`,
	},

	"/static/Sources/MainKit/Types.swift": {
		local:   "static/Sources/MainKit/Types.swift",
		size:    485,
		modtime: 1507488323,
		compressed: `
H4sIAAAAAAAA/3SQQU4DMQxF9zmFz5HNqBJwgZ7AOCZYdOzKcViA5u5omAp1JiWbJP/l5+tb5qt5wIt1
LRhimtK1v16EoIV3CjgHBsN3AgC4kU90wB7v5vL168lwur8Ob4msa2Q4bYcpLceUnX9MC/tgzXAOF63T
kbbAyivFykfG7uYZntdtSveUtc+b55a3LsLGQKbKFFweyqJ1rztXacE+gCJt/9XyoPg2krEyzyiXfyuT
MwaXDE8YQ+fZirzJH13STwAAAP//3D0wcuUBAAA=
`,
	},

	"/static/Tests/MainKitTests/Info.plist": {
		local:   "static/Tests/MainKitTests/Info.plist",
		size:    726,
		modtime: 1507519011,
		compressed: `
H4sIAAAAAAAA/3ySQW+bMBiGz+VXeFYP3SE4uUzT5FIBdiom11jERNsJMXCpVbARuE359xNNJm3J6Pn7
3kfPa3/47q1rwasaRm3NLdz4awiUqWytTXMLc7ldfYV3gYc/kTSWPwUFfatHB0QesSQGcIVQ2PetQohI
AgRLdhJs/DVClEMAn5zrvyF0OBz8ct7yK9vNiyMSg+3V4CamR7fa+Gu/djUMPHyk/6MTeLjWlQu8K/ys
piDeRi+mbhVRr6q1faeMy1SjrcFoHntXeHSDNk1wfUPonrJUPFAuCxby+zy8p58xOs3PePRNVS+u/NWq
SxD9QeNchhGjBQ8flhlJrYzTj1oNlwyRpSSPZRHlnDBaJIRymWwTmi3TzKMlunLamnKY9sc3OQd/8ddL
eV52/+nyx+PDIqKsnstGyam/IEScsKXY7skO7iS6e984T2+WdRcKXt/EeZbNXyiy9DuNZbGn2S5J+V/y
GB0vBKP3+wm83wEAAP//HGaRL9YCAAA=
`,
	},

	"/static/Tests/MainKitTests/Tests.swift": {
		local:   "static/Tests/MainKitTests/Tests.swift",
		size:    237,
		modtime: 1507518971,
		compressed: `
H4sIAAAAAAAA/3TMseoCMQwG8D1PkfH/X+4BnITTSXBScI3nJxTaa2lyKpS+u9xRFEQzZPjy/eJCitn4
1B+gRmuDmpw9uOWldHsJqHXnjGjwospzU1eN9KLgQszMy4o35Owu4Os0DqywY/r7b4V5dErIXcuXtP7C
BsmbeB+/+Pfp80WTatuHhOTxwpUqPQMAAP//G/B4qe0AAAA=
`,
	},

	"/static/Tests/MainTests/Info.plist": {
		local:   "static/Tests/MainTests/Info.plist",
		size:    726,
		modtime: 1507519006,
		compressed: `
H4sIAAAAAAAA/3ySQW+bMBiGz+VXeFYP3SE4uUzT5FIBdiom11jERNsJMXCpVbARuE359xNNJm3J6Pn7
3kfPa3/47q1rwasaRm3NLdz4awiUqWytTXMLc7ldfYV3gYc/kTSWPwUFfatHB0QesSQGcIVQ2PetQohI
AgRLdhJs/DVClEMAn5zrvyF0OBz8ct7yK9vNiyMSg+3V4CamR7fa+Gu/djUMPHyk/6MTeLjWlQu8K/ys
piDeRi+mbhVRr6q1faeMy1SjrcFoHntXeHSDNk1wfUPonrJUPFAuCxby+zy8p58xOs3PePRNVS+u/NWq
SxD9QeNchhGjBQ8flhlJrYzTj1oNlwyRpSSPZRHlnDBaJIRymWwTmi3TzKMlunLamnKY9sc3OQd/8ddL
eV52/+nyx+PDIqKsnstGyam/IEScsKXY7skO7iS6e984T2+WdRcKXt/EeZbNXyiy9DuNZbGn2S5J+V/y
GB0vBKP3+wm83wEAAP//HGaRL9YCAAA=
`,
	},

	"/static/Tests/MainTests/Tests.swift": {
		local:   "static/Tests/MainTests/Tests.swift",
		size:    237,
		modtime: 1507519022,
		compressed: `
H4sIAAAAAAAA/3TMseoCMQwG8D1PkfH/X+4BnITTSXBScI3nJxTaa2lyKpS+u9xRFEQzZPjy/eJCitn4
1B+gRmuDmpw9uOWldHsJqHXnjGjwospzU1eN9KLgQszMy4o35Owu4Os0DqywY/r7b4V5dErIXcuXtP7C
BsmbeB+/+Pfp80WTatuHhOTxwpUqPQMAAP//G/B4qe0AAAA=
`,
	},

	"/static/Tests/MainUITests/Info.plist": {
		local:   "static/Tests/MainUITests/Info.plist",
		size:    726,
		modtime: 1507519014,
		compressed: `
H4sIAAAAAAAA/3ySQW+bMBiGz+VXeFYP3SE4uUzT5FIBdiom11jERNsJMXCpVbARuE359xNNJm3J6Pn7
3kfPa3/47q1rwasaRm3NLdz4awiUqWytTXMLc7ldfYV3gYc/kTSWPwUFfatHB0QesSQGcIVQ2PetQohI
AgRLdhJs/DVClEMAn5zrvyF0OBz8ct7yK9vNiyMSg+3V4CamR7fa+Gu/djUMPHyk/6MTeLjWlQu8K/ys
piDeRi+mbhVRr6q1faeMy1SjrcFoHntXeHSDNk1wfUPonrJUPFAuCxby+zy8p58xOs3PePRNVS+u/NWq
SxD9QeNchhGjBQ8flhlJrYzTj1oNlwyRpSSPZRHlnDBaJIRymWwTmi3TzKMlunLamnKY9sc3OQd/8ddL
eV52/+nyx+PDIqKsnstGyam/IEScsKXY7skO7iS6e984T2+WdRcKXt/EeZbNXyiy9DuNZbGn2S5J+V/y
GB0vBKP3+wm83wEAAP//HGaRL9YCAAA=
`,
	},

	"/static/Tests/MainUITests/UITests.swift": {
		local:   "static/Tests/MainUITests/UITests.swift",
		size:    283,
		modtime: 1507518974,
		compressed: `
H4sIAAAAAAAA/3SOwcrCMBCE73mKPbaXPsAP/6FUBe8Wel3iFgNpEnY3KkjfXZQQRXRPw7czw7glRVaY
hgOJGmM9isBDy1+BAwrBzUC5p4hnYnZHgjkHC0I6pqZ9M0lOxF3hldoY1IVM/azEO3Q+M8E/zOiFqmka
xn2fkncW1cXQtJ3HHOyp9Kzmxwgl5E28hC87Xq/PipIU3V5xSZ5qeDWruQcAAP//wN7niRsBAAA=
`,
	},

	"/static/project.yml": {
		local:   "static/project.yml",
		size:    1216,
		modtime: 1507524867,
		compressed: `
H4sIAAAAAAAA/6ySzW7iMBCA73mKOexh90C458ZuvGoUCAhCr8hNBrBKnCgeVFWR371iEshPqQC1pzj2
+JvPM6Nlhh5UlRvJDK11DBIpvTOeA7BYzv31v3jzdx35U7EJfBHFwf9ALD1IclfTXru/fp+DoslM/HEA
fPEspvPFTETxJhaTGcNjlFngW+uQLHdITL/kPP0A0HuBHsiiOKhEkso17xYHSdu8zDxQ8xXvmPxYJmg8
WNWLcet+Oq4qtYW8BPdJmlARf2M0ZHi1DnhtrUn2mGGdGYDQUNyYMUDqtEcIFTV8gFFrHipiXlWhTq3l
q700n680R8MbX8b3o/nTvvOilmKBOkWdKDT1o0ZQl9rr2bYEp4NokvdzdrvyctTpAd2jVjQ61epWaxgw
7vM44i7P65KXmg5LeU1UsabSuwdNG+R3Xbkn3bp3HbelzPAtL18fHvBQUb/3N4f5jpEd+g9Hf1j1M+AH
5+OMvL/s7Sh/BAAA//+X2KE5wAQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/Sources": {
		isDir: true,
		local: "static/Sources",
	},

	"/static/Sources/Main": {
		isDir: true,
		local: "static/Sources/Main",
	},

	"/static/Sources/Main/Assets.xcassets": {
		isDir: true,
		local: "static/Sources/Main/Assets.xcassets",
	},

	"/static/Sources/Main/Assets.xcassets/AppIcon.appiconset": {
		isDir: true,
		local: "static/Sources/Main/Assets.xcassets/AppIcon.appiconset",
	},

	"/static/Sources/Main/Base.lproj": {
		isDir: true,
		local: "static/Sources/Main/Base.lproj",
	},

	"/static/Sources/MainKit": {
		isDir: true,
		local: "static/Sources/MainKit",
	},

	"/static/Tests": {
		isDir: true,
		local: "static/Tests",
	},

	"/static/Tests/MainKitTests": {
		isDir: true,
		local: "static/Tests/MainKitTests",
	},

	"/static/Tests/MainTests": {
		isDir: true,
		local: "static/Tests/MainTests",
	},

	"/static/Tests/MainUITests": {
		isDir: true,
		local: "static/Tests/MainUITests",
	},
}
